import cv2
import streamlit as st
from ultralytics import YOLO
import tempfile
import numpy as np

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ YOLO
model = YOLO("yolov8n.pt")
VEHICLE_CLASSES = [2, 3, 5, 7]  # –ê–≤—Ç–æ–º–æ–±–∏–ª–∏, –º–æ—Ç–æ—Ü–∏–∫–ª—ã, –∞–≤—Ç–æ–±—É—Å—ã, –≥—Ä—É–∑–æ–≤–∏–∫–∏

st.title("–î–µ—Ç–µ–∫—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —É —à–ª–∞–≥–±–∞—É–º–∞ üöó")

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ", type=["mp4", "avi"])

if uploaded_file is not None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tfile = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
    tfile.write(uploaded_file.read())

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
    cap = cv2.VideoCapture(tfile.name)
    st_frame = st.empty()

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞
        height, width = frame.shape[:2]

        # –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é (–Ω–∞ 2/3 –≤—ã—Å–æ—Ç—ã –∫–∞–¥—Ä–∞)
        line_y = int(height * 0.33)
        cv2.line(frame, (0, line_y), (width, line_y), (0, 0, 255), 2)

        # –î–µ—Ç–µ–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        results = model.predict(frame, classes=VEHICLE_CLASSES, verbose=False)

        for result in results:
            for box in result.boxes:
                x1, y1, x2, y2 = map(int, box.xyxy[0])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –ª–∏–Ω–∏—é
                if y2 >= line_y:  # –ï—Å–ª–∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –±–æ–∫—Å–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏–Ω–∏—é
                    color = (0, 0, 255)  # –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –º–∞—à–∏–Ω —É —à–ª–∞–≥–±–∞—É–º–∞
                    cv2.putText(frame, "AT BARRIER", (x1, y1 - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 1.5, color, 2)
                else:
                    color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

                # –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
                cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä
        st_frame.image(frame, channels="BGR", use_container_width=True)

    cap.release()